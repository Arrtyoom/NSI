Exercice 1 : Ackermann 

1) cas de base -> cas 3 (pas d'appel à la fonction)
   cas récursif -> cas 1 et 2 (appel de fonction)

2) raise Exception(message='')

3) et 4) on fait les vérifications pour l'erreur à chaque appel -> on revérifie à chaque appel récursif alors qu'on "sait"
déjà que m et n sont valides !

Exercice 2 : Fibonacci

1) cas de base : 1 si n est nul / 1 si n vaut 1
couper : n-2 / n-1
régner : fib(n-1) et fib(n-2)
combiner : fib(n-1) + fib(n-2)

3) Cet algorithme ne finit pas toujours car il n'y a aucune condition qui indique une fin

4) 15 appel de fonction pour fib(5)

5) fib(6) = fib(4) + fib(5) = 9 + 15 + appel de fib(6) qui a déclenché tout ça = 25 appels

6) On voit que le temps de calcul devient très rapidement démesuré quand n augmente (peu...).

Exercice 3 :

2) couper : n-1	
   régner : est_pair(n-1) et est_impair(n-1)
   combiner : return

Exercice 4 :

Version 1: réduction du problème :

1) Soit une liste lst dont la première valeur est n, l'appel récursif sera du type :
2) Couper : on crée une copie de lst de l'indice 1 à la fin => lst[1:]
	régner : appel récursif => min(lst[1:])
3) Combiner : on compare le résultat de min(lst[1:]) avec lst[0] et on renvoie le plus petit

4) cas de base : liste vide, on renvoie +infini (float('inf')), from math import inf

Version 2 : récursivité en guise de boucle :

6) C'est O(N²) : on fait N appels récursif avec 1 slice à chaque appel qui est
linéaire en temps.

7) couper : i+1
   régner : min(lst,i+1)
   combiner : comparer lst[i] avec min(lst,i+1)

Exercice 5 :

1) syracuse(1) = 1
   syracuse(5) = 6

2) NON : précondition du docstring : "n est un entier positif"

3) n%2 == 0 <=> pair
   n%2 == 1 <=> impair

4) cas de base : n==1 ; on renvoie 1
5) 2 cas récursifs : n est pair ou impair

6) ls = "longuer_syracuse"
ls(3) -> ls(3*3+1)=ls(10) -> ls(5) -> ls(5*3+1)=ls(16) -> ls(8) -> ls(4) -> ls(2) -> ls(1)
combiner = '1+regner'

Exercice 6 :
1) cas de base : # 1  # Si la liste ne contient moins de n éléments:
		 # 2  #     Renvoyer une liste vide
		 # 3  # Ou Si n est nul:
		 # 4  #     Renvoyer une liste contenant un unique tuple vide

   couper : 	 # 7  # Assigner une liste vide à la variable "out"
		 # 8  # Assigner à une variable "size" le nombre d'éléments contenus dans data

   régner :  Pour tous les indices i allant de 0 à size-n inclus:
#11  #
#12  #     Assigner à "current" un tuple de longueur 1 contenant l'élément à l'indice i de data
#13  #     Assigner à "lst" une liste contenant tous les éléments de data à droite de i (élément i exclus)
#14  #     Assigner à "sub_combs" le résultat de toutes les combinaisons de n-1 éléments pris dans lst

   combiner : Pour chaque élément sub de sub_combs:
#17  #         Définir tup qui est la concaténation des tuples "current" et "sub" (dans cet ordre)
#18  #         Ajouter tup à out
#19  #     Fin Pour
#20  # Fin Pour


